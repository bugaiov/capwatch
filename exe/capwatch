#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "capwatch"
include Capwatch

options = CLI.parse(ARGV)
config = Fund::Config.new

require 'socket'
module AnyBar
  class Client
    DEFAULT_HOSTNAME = 'localhost'

    attr_reader :message, :hostname

    def initialize(port = 1738, hostname = DEFAULT_HOSTNAME)
      @port     = port.to_i
      @hostname = hostname
    end

    def message(message)
      @message  = message
      any_bar = UDPSocket.new
      any_bar.connect hostname, @port
      any_bar.send @message, 0
      any_bar.close
    end

    def quit
      self.message = 'quit'
    end
  end
end

@ports = [1738, 1739, 1740, 1741, 1742]

def terminate_anybar!
  @ports.each { |p| AnyBar::Client.new(p).message("quit") } if options.anybar
end

trap("SIGINT") {
  system("clear")
  terminate_anybar!
  exit 130
}

trap("TERM") {
  terminate_anybar!
  exit 130
}

def demo!(config)
  puts "\nHey there! This is a Demo Fund. Please set up your fund by editing the \"#{Fund::Config::Local::FILE_NAME}\" in your home directory".green if config.demo?
end

if options.telegram
  Telegram.new(options.telegram).start
elsif options.all
  puts List.new(config:config).watch
elsif options.watch
  loop do
    provider = Providers::CoinMarketCap.new(config: config)
    fund = Fund.new(provider: provider, config: config)
    system("clear")
    puts fund.console_table
    demo!(config)
    sleep options.tick
  end
elsif options.anybar

  @ports.each do |port|
    system("ANYBAR_PORT=#{port} open -na AnyBar") unless %x{pgrep AnyBar | wc -w}.strip.to_i == @ports.size
  end

  loop do
    fund = Fund.new(provider: Providers::CoinMarketCap.new(config: config), config: config)

    {
      @ports[4] => "white #{fund.fund_totals[:value_btc].round}",
      @ports[3] => "white #{fund.fund_totals[:value_eth].round}",
      @ports[2] => "white #{fund.fund_totals[:value_fiat].round / 1_000}",
      @ports[1] => "#{fund.fund_totals[:percent_change_24h] > 0 ? "green" : "red"} #{fund.fund_totals[:percent_change_24h].round(2)}",
      @ports[0] => "#{fund.fund_totals[:percent_change_7d] > 0 ? "green" : "red"} #{fund.fund_totals[:percent_change_7d].round(2)}"
    }.each do |k,v|
      AnyBar::Client.new(k).message(v)
    end

    sleep options.tick
  end
else
  provider = Providers::CoinMarketCap.new(config: config)
  fund = Fund.new(provider: provider, config: config)
  puts fund.console_table
  demo!(config)
end
